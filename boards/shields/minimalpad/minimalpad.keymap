#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/gpio/gpio.h>

#define DEFAULT 0
#define LOWER   1

/ {
    // Define a global RGB control behavior to initialize RGB on startup
    behaviors {
        // Behavior to cycle through BT profiles with RGB indication
        bt_nxt_rgb: bt_nxt_rgb {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <100>;
            tap-ms = <5>;
            bindings = <&bt BT_NXT &rgb_ug RGB_COLOR_HSB(180,100,80)>;
            label = "BT_NEXT_WITH_RGB";
        };
        
        bt_prv_rgb: bt_prv_rgb {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <100>;
            tap-ms = <5>;
            bindings = <&bt BT_PRV &rgb_ug RGB_COLOR_HSB(300,100,80)>;
            label = "BT_PREV_WITH_RGB";
        };
    };

    sensors {
        compatible = "zmk,keymap-sensors";
        sensors = <&encoder0>;
        triggers-per-rotation = <10>;
    };

    // Define macros for layer-based RGB colors
    macros {
        rgb_default: rgb_default {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_ON &rgb_ug RGB_COLOR_HSB(140,100,100)>;
            label = "RGB_DEFAULT";
        };

        rgb_lower: rgb_lower {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_COLOR_HSB(285,80,100)>;
            label = "RGB_LOWER";
        };

        // Bluetooth status indication macros with forced RGB
        bt_profile_1: bt_profile_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_ON &bt BT_SEL 0 &rgb_ug RGB_COLOR_HSB(0,100,100)>; // Red
            label = "BT_PROFILE_1";
        };

        bt_profile_2: bt_profile_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_ON &bt BT_SEL 1 &rgb_ug RGB_COLOR_HSB(30,100,100)>; // Orange
            label = "BT_PROFILE_2";
        };

        bt_profile_3: bt_profile_3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_ON &bt BT_SEL 2 &rgb_ug RGB_COLOR_HSB(60,100,100)>; // Yellow
            label = "BT_PROFILE_3";
        };

        bt_profile_4: bt_profile_4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_ON &bt BT_SEL 3 &rgb_ug RGB_COLOR_HSB(90,100,100)>; // Green
            label = "BT_PROFILE_4";
        };

        bt_clr_macro: bt_clr_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_ON &bt BT_CLR &rgb_ug RGB_COLOR_HSB(210,100,100)>; // Blue for clearing
            label = "BT_CLEAR";
        };
        
        bt_clr_all_macro: bt_clr_all_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_ON &bt BT_CLR_ALL &rgb_ug RGB_COLOR_HSB(270,100,100)>; // Purple for clearing all
            label = "BT_CLEAR_ALL";
        };

        // Force RGB on macro - fixed version
        rgb_on_macro: rgb_on_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_ON>;
            label = "RGB_FORCE_ON";
        };
    };

    // Define combo behavior to change RGB color when activating layers
    combos {
        compatible = "zmk,combos";
        combo_lower_layer {
            timeout-ms = <50>;
            key-positions = <15>; // Position of the layer key
            bindings = <&rgb_lower>;
            layers = <0>;
        };

        combo_default_layer_from_lower {
            timeout-ms = <50>;
            key-positions = <15>; // Position of the layer key (when releasing)
            bindings = <&rgb_default>;
            layers = <1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &bt_profile_1      &bt_profile_2      &bt_profile_3      &bt_profile_4
                &bt_prv_rgb        &bt_nxt_rgb        &out OUT_BLE       &out OUT_TOG
                &bt_clr_macro      &kp N2             &kp N3             &out OUT_USB
                &kp N0             &kp DOT            &rgb_on_macro      &mo LOWER
                &kp C_MUTE                                            // Encoder button - Mute
            >;
            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        lower_layer {
            bindings = <
                &rgb_ug RGB_TOG    &rgb_ug RGB_EFF    &rgb_ug RGB_BRI    &rgb_ug RGB_HUI
                &kp N7             &kp N8             &kp N9             &kp BSPC
                &kp N4             &kp N5             &kp N6             &kp PLUS
                &bootloader        &sys_reset         &bt_clr_all_macro  &trans
                &kp C_MUTE
            >;
            sensor-bindings = <&inc_dec_kp PG_UP PG_DN>;
        };
    };
};